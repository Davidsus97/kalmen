<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>My Website</title>
  <link rel="stylesheet" href="styles.css">
</head>
<body>
  <header>
    <h1>Add Income</h1>
  </header>
  <nav>
    <a href="index.html">Books</a>
    <a href="database.html">Database</a>
    <a href="addIncome">Add Income</a>
    <a href="expenses.html">Add Expenses</a>
    <a href="settings.html">Settings</a>
    <a href="signIn.html">Sign in</a>
    <a href="signOut.html">Sign Out</a>
  </nav>
  <section id="addIncome">
    <h2>Add Income</h2>
    <form>
      <label for="incomedate">Income Date:</label>
      <input type="date" id="incomedate" name="incomedate"><br><br>
      <label for="incomecategory">Category:</label>
      <select id="incomecategory" name="incomecategory">
        <option value="incomecategory1">Category 1</option>
        <option value="incomecategory2">Category 2</option>
        <option value="incomecategory3">Category 3</option>
        <!-- Add more options as needed --><!-- Options will be dynamically added here -->
      </select><br><br>
      <label for="incomesupplier">Supplier:</label>
      <select id="incomesupplier" name="supplier">
        <option value="incomesupplier1">Supplier 1</option>
        <option value="incomesupplier2">Supplier 2</option>
        <option value="incomesupplier3">Supplier 3</option>
        <!-- Add more options as needed -->
      </select><br><br>
      <label for="incomeclass1">Class:</label>
      <select id="incomeclass1" name="class1">
        <option value="incomeclass2">Class 1</option>
        <option value="incomeclass3">Class 2</option>
        <option value="incomeclass4">Class 3</option>
        <!-- Add more options as needed -->
      </select><br><br>
      <label for="incomeaccount">Account:</label>
      <select id="incomeaccount" name="incomeaccount">
        <option value="incomeaccount1">Account 1</option>
        <option value="incomeaccount2">Account 2</option>
        <option value="incomeaccount3">Account 3</option>
        <!-- Add more options as needed -->
      </select><br><br>
      <label for="incomeamount">Amount:</label>
      <input type="text" id="incomeamount" name="incomeamount"><br><br>
      <label for="incomecustomer">Customer:</label>
      <input type="text" id="incomecustomer" name="incomecustomer"><br><br>
      <label for="incomeitem">Item:</label>
      <input type="text" id="incomeitem" name="incomeitem"><br><br>
      <label for="incomenotes">Notes:</label>
      <textarea id="incomenotes" name="incomenotes" rows="4" cols="50"></textarea><br><br>
      <button type="button" id="addincome">Add Income</button>
      <button type="button" id="retrieveincome">Retrieve Income</button>
      <button type="button" id="updateincome">Update Income</button>
      <button type="button" id="deleteincome">Delete Income</button>
    </form>
  </section>
  <footer>
    <p>&copy; 2024 My Website</p>
  </footer>
  <script type="module">
    // Import the functions you need from the SDKs you need
    import { initializeApp } from "https://www.gstatic.com/firebasejs/10.8.1/firebase-app.js";
    import { getAnalytics } from "https://www.gstatic.com/firebasejs/10.8.1/firebase-analytics.js";
    import { getDatabase, ref, set, get, update, remove, push } from "https://www.gstatic.com/firebasejs/10.8.1/firebase-database.js";

    // Your web app's Firebase configuration
    // For Firebase JS SDK v7.20.0 and later, measurementId is optional
const firebaseConfig = {
  apiKey: "AIzaSyDIpvVAoem3RBq_5rL2mmuVEGgakbXt5_U",
  authDomain: "kalmen.firebaseapp.com",
  databaseURL: "https://kalmen-default-rtdb.firebaseio.com",
  projectId: "kalmen",
  storageBucket: "kalmen.appspot.com",
  messagingSenderId: "889174666338",
  appId: "1:889174666338:web:e7e4916ffced9c6131753b",
  measurementId: "G-NHHY5709EC"
};

    // Initialize Firebase
    const app = initializeApp(firebaseConfig);
    const analytics = getAnalytics(app);
    const database = getDatabase(app);

    const incomedate = document.getElementById("incomedate");
    const incomecategory = document.getElementById("incomecategory");
    const incomesupplier = document.getElementById("incomesupplier");
    const incomeclass1 = document.getElementById("incomeclass1");
    const incomeaccount = document.getElementById("incomeaccount");
    const incomeamount = document.getElementById("incomeamount");
    const incomecustomer = document.getElementById("incomecustomer");
    const incomeitem = document.getElementById("incomeitem");
    const incomenotes = document.getElementById("incomenotes");

    const addIncomeButton = document.getElementById("addincome");
    const retrieveIncomeButton = document.getElementById("retrieveincome");
    const updateIncomeButton = document.getElementById("updateincome");
    const deleteIncomeButton = document.getElementById("deleteincome");

    addIncomeButton.addEventListener("click", () => {
  const incomesRef = ref(database, "incomes"); // Reference to the "incomes" node
  const newIncomeRef = push(incomesRef); // Push a new child node under "incomes"
  const newIncomeKey = newIncomeRef.key; // Get the unique key generated for the new child node
  set(ref(database, `incomes/${newIncomeKey}`), {  // Set data under the new child node
        incomedate: incomedate.value,
        incomecategory: incomecategory.value,
        incomesupplier: incomesupplier.value,
        incomeclass1: incomeclass1.value,
        incomeaccount: incomeaccount.value,
        incomeamount: Number(incomeamount.value),
        incomecustomer: incomecustomer.value,
        incomeitem: incomeitem.value,
        incomenotes: incomenotes.value
      })
        .then(() => {
          alert("Data added successfully");
        })
        .catch((error) => {
          alert("Error adding data");
          console.log(error);
        });
    });

    retrieveIncomeButton.addEventListener("click", () => {
      get(ref(database, "incomes"))
        .then((snapshot) => {
          if (snapshot.exists()) {
            const data = snapshot.val();
            incomedate.value = data.incomedate;
            incomecategory.value = data.incomecategory;
            incomesupplier.value = data.incomesupplier;
            incomeclass1.value = data.incomeclass1;
            incomeaccount.value = data.incomeaccount;
            incomeamount.value = data.incomeamount;
            incomecustomer.value = data.incomecustomer;
            incomeitem.value = data.incomeitem;
            incomenotes.value = data.incomenotes;
          } else {
            alert("No Data Found!");
          }
        })
        .catch((error) => {
          alert("Error! Unable to retrieve data.");
          console.log(error);
        });
    });

    updateIncomeButton.addEventListener("click", () => {
      update(ref(database, "incomes"), {
        incomedate: incomedate.value,
        incomecategory: incomecategory.value,
        incomesupplier: incomesupplier.value,
        incomeclass1: incomeclass1.value,
        incomeaccount: incomeaccount.value,
        incomeamount: Number(incomeamount.value),
        incomecustomer: incomecustomer.value,
        incomeitem: incomeitem.value,
        incomenotes: incomenotes.value
      })
        .then(() => {
          alert("Data updated successfully");
        })
        .catch((error) => {
          alert("Error updating data");
          console.log(error);
        });
    });

    deleteIncomeButton.addEventListener("click", () => {
      remove(ref(database, "incomes"))
        .then(() => {
          alert("Data deleted successfully");
        })
        .catch((error) => {
          alert("Error deleting data");
          console.log(error);
        });
    });
  </script>
</body>
</html>
